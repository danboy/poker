mixin story(story, index, iterationDate)
  - var Month = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
  - var current = '';
  - if(index == 0){current = 'current'};
  li(class='story #{story.story_type} #{story.current_state}')
    ul.tools
      - if(story.estimate != undefined)
        li
          a.estimate
            - if(story.estimate == '-1')
              strong( data-story='#{story.id}') estimate
            - else
              strong= story.estimate
              | points
      - else
        li
          a.type= story.story_type
      li.state
        = story.current_state
      li.due_date
        .month= Month[iterationDate.getMonth()]
        strong.day= iterationDate.getDate()+1
    h3
      a(href='#{story.url}', class='title')= story.name
    - if(typeof(story.description) == "string")
      .description
        div!= story.description.replace(/(\n)/g,"<br/>").replace(/(?:[*])([^*]*)(?:[*])/g,'<b>$1</b>');

mixin stories(stories, iterationDate)
  ul#stories
    - if (stories.story && !stories.story.id)
      each story,index in stories.story
        mixin story(story, index, iterationDate)
    - else if (stories.story && stories.story.id)
      mixin story(stories.story, 0, iterationDate)

menu.opt_list
  li.button.opt
    a#present presentation mode
- each iteration, index in iterations
  - if(!iteration.type)
    - var date = new Date(iteration.finish)
    h2= (date.getMonth()+1)+"/"+(date.getDate()+1)
    mixin stories(iteration.stories, date)
script(src="/js/presenter.js")
script(src="/js/poker.js")
script(src="http://majek.github.com/sockjs-client/sockjs-latest.min.js")
script
  var sock = new SockJS(window.location.origin + '/game_socket/#{trackerId}');
  sock.onmessage = function(message) {
    var data = JSON.parse(message.data);
    switch(data.instruction){
      case 'start':
        pres = new Presentation('.story', #{trackerId});
        pres.start();
      break;
      case 'next':
        pres.next();
      break;
      case 'previous':
        pres.previous();
      break;
      case 'stop':
        pres.stop();
      break;
    }
  };
  sock.onclose = function(m) {
    console.log('closed',m.status,m.reason);
    pres.stop();
  };
  $('#present').click(function(ev){
    ev.preventDefault();
    $.ajax({
      url: '/trackers/start_game'
    , data: {
      trackerId: #{trackerId}
      , instruction: 'start'
      }
    , type: 'POST'
    , error : function(xhr, ajaxOptions,err) {
        console.log(err);
      }
    , success: function(resp){
        console.log('data',resp.data);
      }
    });
  });

  var poker = new SockJS('/poker');
  poker.onopen = function() {
    console.log('open');
  };
  poker.onmessage = function(message) {
    var results = JSON.parse(message.data);
    switch(results.type){
    //switch this to a callback
    case "estimate":
      $('.game_board .countdown').html('<ol class="result"></ol>');
      for(key in results.results){
        if(results.results[key] !== null && results.results[key] > 0){
          size = results.results[key];
          $('.result').append('<li class="size_'+size+'">'+key+'<small>'+size+'</small></li>');
        }
      }
      $('.close').click(function(){$('.game_board').remove();});
    break;
    default:
      console.log('default');
    }
  };
  poker.onclose = function(m) {
    $('.game_board').remove();
    return poker = new SockJS('http://rsp.pinmonkey.com:3000/poker');
  };

